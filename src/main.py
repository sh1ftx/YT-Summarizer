import os
import google.generativeai as genai
from whisper import load_model
from yt_dlp import YoutubeDL

# Fun√ß√£o para validar a API key
def validar_api_key():
    while True:
        print("üîë Insira sua API KEY do Google Gemini")
        print("üëâ Dispon√≠vel em: https://ai.google.dev/gemini-api/docs/api-key?hl=pt-br")
        api_key = input("-> ").strip()

        if not api_key:
            print("‚ùå Nenhuma chave foi inserida. Tente novamente.\n")
            continue

        try:
            genai.configure(api_key=api_key)
            # Teste r√°pido: tenta listar modelos dispon√≠veis
            genai.list_models()
            return  # Se passou, sai do loop
        except Exception as e:
            print(f"‚ùå Chave inv√°lida ou erro de conex√£o: {e}\nüîÅ Tente novamente.\n")

# Chamada de valida√ß√£o (bloqueia at√© ser v√°lido)
validar_api_key()

# Fun√ß√£o para baixar √°udio do YouTube
def baixar_audio_youtube(url, filename="audio"):
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': f'{filename}.%(ext)s',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'quiet': True,
    }

    with YoutubeDL(ydl_opts) as ydl:
        ydl.download([url])

    if os.path.exists("audio.mp3"):
        return "audio.mp3"
    else:
        raise FileNotFoundError("‚ùå O arquivo de √°udio n√£o foi encontrado.")

# Fun√ß√£o para transcrever √°udio com Whisper
def transcrever_audio(path):
    model = load_model("base")
    result = model.transcribe(path)
    return result["text"]

# Fun√ß√£o para gerar resumo usando o Gemini
def resumir_em_topicos(transcricao):
    prompt = f"""
Voc√™ √© um assistente especialista em resumos de v√≠deos do YouTube.

Transforme a transcri√ß√£o a seguir em um resumo fiel, claro e detalhado, organizado em t√≥picos e subt√≥picos. O objetivo √© que algu√©m consiga entender tudo o que foi falado apenas lendo o resumo.

Transcri√ß√£o:
\"\"\"{transcricao}\"\"\"
"""
    model = genai.GenerativeModel("gemini-1.5-flash")
    response = model.generate_content(prompt)
    return response.text

# Fluxo completo de gera√ß√£o do resumo
def gerar_resumo_do_video(url):
    audio_path = baixar_audio_youtube(url)
    texto = transcrever_audio(audio_path)
    resumo = resumir_em_topicos(texto)
    return resumo

# Execu√ß√£o principal
if __name__ == "__main__":
    url = input("\nüé• Insira a URL do v√≠deo: ").strip()
    print("\n‚è≥ Gerando resumo...\n")
    resumo = gerar_resumo_do_video(url)
    print("\n‚úÖ RESUMO GERADO:\n")
    print(resumo)

